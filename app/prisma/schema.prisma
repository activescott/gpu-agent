// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model gpu {
  // unique name for the card; also primary key
  name  String @id @unique
  label String

  // Specs:
  tensorCoreCount             Float?
  fp32TFLOPS                  Float
  fp16TFLOPS                  Float
  int8TOPS                    Float?
  memoryCapacityGB            Float
  memoryBandwidthGBs          Float
  // maximum thermal design power was added later and not all GPUs have it listed in our DB. See the seed.
  maxTDPWatts                 Float?
  gpuArchitecture             String
  // This is a list of the supported precisions for hardware-accelerated generalized matrix multiplication operations (GEMM).
  supportedHardwareOperations String[]
  
  // The compute capability of a device is represented by a version number, also sometimes called its “SM version”. This version number identifies the features supported by the GPU hardware and is used by applications at runtime to determine which hardware features and/or instructions are available on the present GPU. 
  // CUDA Compute Capability references: 
  // - https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capability
  // - https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities
  // - https://developer.nvidia.com/cuda-gpus <<< GPU list
  supportedCUDAComputeCapability Float?

  // references for the specs:
  references        String[]
  // custom-written summary for the GPU. Used on info pages
  summary           String @default("")

  // for the prisma relation for Listing.gpu/gpuName
  Listing   Listing[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
}

model GpuLastCachedListings {
  gpuName            String @unique
  lastCachedListings DateTime
  
  @@index([gpuName])
}

model Listing {
  itemId String  @id @unique
  // we use this as a soft-delete
  // ebay doesn't provide the sold status of an item - the items just don't come back from the search endpoints.
  // so we use this to mark items as stale and not return them.
  stale  Boolean @default(false)

  title                    String
  priceValue               String
  priceCurrency            String
  buyingOptions            String[] // e.g. | "FIXED_PRICE" | "AUCTION" | "BEST_OFFER" | "CLASSIFIED_AD"
  imageUrl                 String
  adultOnly                Boolean
  itemHref                 String
  leafCategoryIds          String[]
  listingMarketplaceId     String?
  sellerUsername           String
  sellerFeedbackPercentage String
  sellerFeedbackScore      Int
  condition                String?
  conditionId              String?
  itemAffiliateWebUrl      String
  // we flatten these from a list.
  thumbnailImageUrl        String
  epid                     String
  itemCreationDate         DateTime?
  itemLocationCountry      String?

  // relation per https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations
  // when gpu is deleted, so are its listings
  gpu     gpu    @relation(fields: [gpuName], references: [name], onDelete: NoAction, onUpdate: Cascade)
  gpuName String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([gpuName, stale])
}
